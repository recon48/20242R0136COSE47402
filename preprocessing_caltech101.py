# -*- coding: utf-8 -*-
"""preprocessing_caltech101.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ocT6NOxZSI13u1pQVfTHSxJWqWnNHI3n

## Drive Mount
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Preparation"""

!pip install ultralytics

from ultralytics import YOLO
from PIL import Image
import matplotlib.pyplot as plt

import os
from PIL import Image

# COCO 클래스 매핑
category_to_coco_label = {
    "airplanes": "airplane",
    "car_side": "car",
    "cellphone": "cell phone",
    "chair": "chair",
    "cup": "cup",
    "elephant": "elephant",
    "pizza": "pizza",
    "scissors": "scissors",
    "stop_sign": "stop sign",
    "umbrella": "umbrella",
    "laptop": "laptop"
}

# 타겟 카테고리 지정
target_categories = [
    "airplanes", "car_side", "cellphone", "chair", "cup",
    "elephant", "pizza", "scissors", "stop_sign", "umbrella", "laptop"
]

"""## Dataset"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/mlvlab/ProMetaR.git
# %cd ProMetaR/

!git clone https://github.com/KaiyangZhou/Dassl.pytorch.git
# %cd Dassl.pytorch/

# Install dependencies
!pip install -r requirements.txt
!cp -r dassl ../
# Install this library (no need to re-build if the source code is modified)
# !python setup.py develop
# %cd ..

!pip install -r requirements.txt

# %mkdir outputs
# %mkdir data

# %cd data
# %mkdir caltech-101

!cp "/content/drive/My Drive/101_ObjectCategories.tar.gz" ./  import tarfile

# 압축 해제
with tarfile.open('101_ObjectCategories.tar.gz', 'r:gz') as tar:
    tar.extractall(path='./caltech-101')

# %cd caltech-101

# %cd ../../
!pwd
!cp "/content/drive/My Drive/split_zhou_Caltech101.json" ./data/caltech-101/

"""## Detect and Crop"""

def detect_and_crop_yolo(image_path, target_label, model_path='yolov8n.pt'):


    model = YOLO(model_path)


    img = Image.open(image_path).convert("RGB")


    results = model(img)


    boxes = results[0].boxes.xyxy  # [x_min, y_min, x_max, y_max]
    confidences = results[0].boxes.conf
    classes = results[0].boxes.cls  # 클래스 인덱스

    if len(boxes) == 0:
        print(f"No objects detected in {image_path}.")
        return None

    model_classes = model.names
    for idx, box in enumerate(boxes):
        class_name = model_classes[int(classes[idx])]
        if class_name == target_label:

            x_min, y_min, x_max, y_max = map(int, box.tolist())


            cropped_image = img.crop((x_min, y_min, x_max, y_max))
            print(f"Detected and cropped '{target_label}' in {image_path}.")
            return cropped_image


    print(f"No target '{target_label}' detected in {image_path}.")
    return None

"""Crop and Save"""

def crop_and_save_all_images(input_dir, output_dir, target_categories):
    """
    101_ObjectCategories 폴더 내 target_categories에 포함된 이미지는 Crop하고,
    포함되지 않은 이미지는 원본을 저장합니다.

    Args:
        input_dir (str): 원본 이미지 폴더 경로.
        output_dir (str): Crop된 이미지를 저장할 폴더 경로.
        target_categories (list): Crop을 진행할 카테고리 리스트.
    """
    no_detection_count = 0  # 탐지되지 않은 이미지 수
    total_images = 0       # 전체 이미지 수
    detection_count=0


    for category in os.listdir(input_dir):
        category_path = os.path.join(input_dir, category)
        if not os.path.isdir(category_path):
            continue


        category_output_path = os.path.join(output_dir, category)
        os.makedirs(category_output_path, exist_ok=True)

        for image_file in os.listdir(category_path):
            total_images += 1
            print(f"진행 완료 이미지 수 : {total_images}")
            print(f"no detection 이미지 수 : {no_detection_count}")
            print(f"detection 이미지 수 : {detection_count}")
            image_path = os.path.join(category_path, image_file)

            try:
                if category in target_categories:

                    target_label = category_to_coco_label.get(category, None)
                    if not target_label:
                        print(f"Category '{category}' does not map to a COCO label. Skipping...")
                        continue

                    cropped_image = detect_and_crop_yolo(image_path, target_label)
                    if cropped_image is None:

                        print(f"No detection for {image_path}. Saving original image.")
                        cropped_image = Image.open(image_path).convert("RGB")
                        no_detection_count += 1
                    else : detection_count +=1
                else:

                    print(f"Category '{category}' not in target_categories. Saving original image.")
                    cropped_image = Image.open(image_path).convert("RGB")


                save_path = os.path.join(category_output_path, image_file)
                cropped_image.save(save_path)
                print(f"Saved image: {save_path}")
            except Exception as e:
                print(f"Error processing {image_path}: {e}")


    print(f"Total images processed: {total_images}")
    print(f"Number of images with no detection: {no_detection_count}")
    print(f"Number of images with detection: {detection_count}")


input_dir = "/content/ProMetaR/data/caltech-101/101_ObjectCategories"  # 원본 이미지 폴더
output_dir = "/content/drive/MyDrive/cropped_101_ObjectCategories"  # Crop된 이미지 저장 폴더


crop_and_save_all_images(input_dir, output_dir, target_categories)